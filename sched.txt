SUMMER SCHOOL SCHEDULE

* Tuesday (day 1): goals & refinement
   ** 15 min: goals
     - Goal: reasoning with failures (disk stop working working)
       databases, file systems, flash drives must handle crashes
         setup: computer (volatile storage) and disks (persistent storage)
       fscq demo
       dealing with failures is hard; why?
         persistent state becomes inconsistent
         storage runs concurrently with program
       Study of Linux FS
       Flash drives
     - Sequence of programming assignment
     - Schedule
   ** proof style: refinement
     - butler's notes
   ** lab infrastructure
     - Refinement theorems
     - Programs and exec relation
     - Extraction 
     - Example: in-class refinement: StatDB
     - Install software
   ** HW: bad sector lab
      - exercise in abstraction function
      - understand disks

* Wednesday (day 2): disk failures
  ** solution of bad-sector lab
     focus on abstraction function
  ** disk failure
    disk goes bad, fail-stop model
  ** modeling disk crashes
    exec, rexec
    progspec
    maybe holds
    proof & implement read, disk size
  ** HW: implement & proof write for replicated disk
  
* Thursday (day 3): recovery
  ** Solution of read/write
  ** Crash condition
  ** Recovery
  ** Idempotence
  ** HW: implement and proof fixup?

* Friday (day 4): logging
  ** Solution of HW
  ** Crashes during multiple step operations
    Logging
  ** FSCQ (labs inspired by FSCQ)
    Show code
  ** Yggdrasil
    Very different approach
    Show code
