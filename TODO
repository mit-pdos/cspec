Things to clean up:

- it would be nice if [prog_spec_symbolic_execute] labeled the subgoals it
  created based on the if statements that led to it.  an easy way to do this
  would be to introduce a "Label" opcode to the language.

  empirically, though, we didn't run into confusion about which branch is where
  during DSSS.

- RemappedDisk: make sure that we can replace the abstraction relation with an abstraction function
  as defined in the [init] part of the proof at the bottom of RemappedDiskImpl.v.

- students need to install haskell-stack

- Why [prog_spec] is useful: avoid having to reason about execution of functions twice
  (once for normal execution -- postcondition, and once for crashes -- recovery condition).
  That ends up with a quadratic number of subgoals.

  Also [prog_spec] helps avoid the many cases generated by [prog_spec_symbolic_execute]
  in RemappedDiskImpl.v, as an example.

- lab for POCS: 1 disk, but update two sectors atomically

- minimal NBD client that reads/writes sectors, to test/demo remap-nbd with broken write

- explain haskell extraction more, how the pieces fit together

- explain correspondence of tactics to commutative diagram:
  symbolic execution goes across
  prove_final_state goes up to the spec layer

- explain how symbolic execution works

- better story for what's going on with the [world] business

- see notes below from Perry Metzger about how to run stack on a Mac

- use coqdoc more

- point to where various pieces are defined (e.g., Interface, API, etc)

- remapped disk lab:
  + explain what's with None vs Some x: in-bounds vs out-of-bounds.
  + what happens to the bad sector?  it's (Some x) for a garbage value x.

===

So, on a mac
 
(1) you must have Xcode installed from the app store to get the haskell bits working. (If you don’t have XCode already installed, you’ll need Sierra (10.12) to get it.)

(2) Download ghc 8.0.2 “core” from https://www.haskell.org/platform/mac.html

(3) Run “stack config set system-ghc --global true” then “stack setup”. Then you can run make on the repository successfully.
￼
If you have already installed GHC via homebrew, step (3) is sufficient to run make.

===

to keep track of the kinds of symbolic execution cases we need to handle:

  [if] statements where conditions are [sumor]s, like [if (a == b) then foo else bar]

  [if] statements where conditions are [bool]s, like [if (a =? b) then foo else bar]

  [match] statements that do some kind of case analysis

  [if] statements at the top level of the program, like
    [if foo then Ret 1 else Ret 2]

  [if] statements inside a program, like
    Ret (if foo then 1 else 2)
