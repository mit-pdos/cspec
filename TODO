Things to clean up:

- move Hoare specs of an API (such as src/TwoDisk/TwoDiskTheorems.v) into the next level up,
  because they are simply helpers for the next layer.

- get rid of preconditions from prog_spec?
  see commit acdfaf460b8cbe180959192f1da3b8cb03ca4409

- mechanically check assumed facts to make sure students didn't state some axiom (e.g., Axiom False)
  or import NoCrashes when we wanted them to prove crashes.  (use Print Assumptions ...)

- RemappedDisk: make sure that we can replace the abstraction relation with an abstraction function
  as defined in the [init] part of the proof at the bottom of RemappedDiskImpl.v.

- students need to install haskell-stack

- Why [prog_spec] is useful: avoid having to reason about execution of functions twice
  (once for normal execution -- postcondition, and once for crashes -- recovery condition).
  That ends up with a quadratic number of subgoals.

- lab for POCS: 1 disk, but update two sectors atomically

===

summer school schedule:

* Tuesday (day 1): goals & refinement
   ** 15 min: goals
     - Goal: reasoning with failures (disk stop working working)
       databases, file systems, flash drives must handle crashes
         setup: computer (volatile storage) and disks (persistent storage)
       dealing with failures is hard; why?
         persistent state becomes inconsistent
         storage runs concurrently with program
       Study of Linux FS
       Flash drives
     - Sequence of programming assignment
     - Schedule
   ** proof style: refinement
     - butler's notes
     - illustrate w. our refinement theorems
   ** lab infrastructure
     - Programs and exec relation
     - Extraction 
     - Example: in-class refinement: StatDB
     - Install software
   ** HW: bad sector lab
      - exercise in abstraction function
      - understand disks

* Wednesday (day 2): crashes
  ** solution of bad-sector lab
     focus on abstraction function
  ** crashes
    power failure, etc.
  ** modeling disk crashes
    exec, rexec
    progspec
    proof & implement read, disk size
  ** HW: implement & proof write for replicated disk
  
* Thursday (day 3): recovery
  ** Solution of read/write
  ** Crash condition
  ** Recovery
  ** Idempotence
  ** HW: implement and proof fixup?

* Friday (day 4): logging
  ** Solution of HW
  ** Crashes during multiple step operations
    Logging
  ** FSCQ (labs inspired by FSCQ)
    Show code
  ** Yggdrasil
    Very different approach
    Show code
