L0: Intro reasoning about crashes and failures

* Goal: verify systems that have persistent state but may fail
  Examples:
    file systems, databases,
    internal software on storage controlers (e.g., SSD)
  Two kinds:
    crashes (e.g., power failures)
    failures, that is devices stops working (e.g., dead disk, dead sector)
  Assumption: fail-stop
    after failure, computer systems stops immediately
    on crash, computer reboots and one can run repair

* Motivation: dealing with failures is difficult
  Persistent state becomes inconsistent
    E.g., failure during a two-step operation (e.g., updating free list and file)
    -> Block is marked allocated, but isn't in use
    -> Block is part of a file, but not marked allocated
  Storage runs concurrent with program
    Programs sends several disk request to disk, disk works on them
    After disk failure, which requests have been processed?
  Storage devices are slower than main memory
    Many complex optimizations to avoid disks writes
    Complexity leads to more opportunities for problems

* Examples:
  Linux file system study [http://pages.cs.wisc.edu/~ll/papers/fsstudy.pdf]
    FSCQ slides [https://pdos.csail.mit.edu/papers/fscq:sosp15-slides.pdf]
  SSD study [https://www.usenix.org/system/files/conference/fast13/fast13-final80.pdf]
  Promising area for verification
    Bugs can have bad consequences
    Complex systems, easy to have bugs

* Active area of research
  Many bug-finding tools
  Model checking
  Some verification
    This and next 3 lectures explore verification approach
    
* 2 labs to illustrate issues
  verified remapping disk
    deals with one bad sector
  verified replicated disks
    deals with device failures

===
    
demo of replicated disk
  [ run everything as root ]
  ./bin/replicate-nbd init
  ./bin/replicate-nbd start &

  modprobe nbd
  nbd-client localhost /dev/nbd0
  mkfs -t ext4 /dev/nbd0
  mount /dev/nbd0 /mnt/x
  cd /mnt/x

  echo hello world > test.txt
  sync
  strings disk0.img
  strings disk1.img

  rm disk0.img
  echo another test > foo.txt
  sync
  strings disk1.img

  cat test.txt

  umount /mnt/x
  nbd-client -d /dev/nbd0

Verification approach: state machine and simulation
  standard 2-layer diagram
  See chapter 6 and 8 of [http://bwlampson.site/48-POCScourse/48-POCS2006.pdf]

  state machine: state + transitions + initial states
  refinement: two state machines
    spec state machine (the spec)
    code state machine (the code / implementation)
  abstraction function / relation
  proof: backward simulation
    every execution in the implementation (code) corresponds to
      an allowed execution in the spec
    and initial states line up

Example: StatDB (chapter 8)
  specification
    state:
      db: multiset of all values (ints) written to data db
    transistions:
      add: adds a new value to the multiset
      mean: return the average of all values in the multiset
    initial state: empty multiset
  code state machine:
    state:
      sum: sum of values added so far
      count: number of values
    transitions: read and write variables
    initial state: zero sum and count
  abstraction: relate sum and count variables to the spec multiset
  proof: backward simulation, from implementation to spec
    initial states line up
    for each transition of implementation, there exists a corresponding spec transition

[ do the code walk-through and subsequent [add] example using the
  student-facing deepspec-pocs repo ]

StatDB in Coq
  src/StatDb/StatDbAPI.v
  src/Variables/VariablesAPI.v

  worlds: src/Refinement/Prog.v

  shallow embedding
    uses Gallina for most of the programming language
    also splits the state into two parts: shared state and "per-invocation" state
    per-invocation state is implicit in [prog]'s execution and arguments being passed

  reasoning about executions:
    src/Refinement/Hoare.v, [prog_spec]

  refinement
    src/Refinement/Interface.v
    look at definiton of [Interface], [impl_ok] inside it, and [op_spec]

  src/StatDb/StatDbImpl.v

Implement and prove [add]
  add:
      sum <- Prim vars (Read VarSum);
      count <- Prim vars (Read VarCount);
      _ <- Prim vars (Write VarSum (sum + v));
      _ <- Prim vars (Write VarCount (count + 1));
      Ret tt.

  proof:
      lift_world.
      prog_spec_symbolic_execute inv_step.
      solve_final_state.

      unfold statdb_abstraction in *.
      simpl in *.
      intuition auto.
      omega.
      omega.

Exercise: implement and prove [mean]
  git clone https://github.com/mit-pdos/deepspec-pocs
  Install stack & build
  Implement mean and run ./bin/statdb-cli
  Prove mean

Homework: remapping disk
  Disks instead of Variables
    src/BadSectorAPI/BadSectorAPI.v
  Your goal: abstraction function and proof ...
    src/RemappedDisk/RemappedDiskImpl.v
  Do demo of not working
    ./bin/remap-nbd init
    ./bin/remap-nbd start
    nbd-client localhost /dev/nbd0
    dd if=/dev/urandom of=/dev/nbd0
    nbd-client -d /dev/nbd0

    ./bin/remap-nbd start
    nbd-client localhost /dev/nbd0
    hexdump /dev/nbd0 | less
    nbd-client -d /dev/nbd0
